
JEEP_NAME="ARMED JEEP"

function init(self)
    -- Add initialization code here
    -- Remove this function if not needed
    
	self.bounds=getSpriteBounds("#sprite")    
    self.selected=false
    self.initialScale=go.get_scale()
    
    self.goalX = go.get_position("#sprite").x
    self.goalY = go.get_position("#sprite").y
    self.needToUpdateRotation=false
    
    self.speed=200
    
    msg.post(".", "acquire_input_focus")
    
    go.set("#sprite", "scale.x", 0.3)
    go.set("#sprite", "scale.y", 0.3)
    
    table.insert(selectableUnits, go.get_id())
    
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end


function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
    
    local pos = go.get_position()
    
    local dir=vmath.vector3(pos.x-self.goalX,pos.y-self.goalY,0);
    
    if self.needToUpdateRotation then
    	local old_rot = go.get_rotation()
    
	    local angle = math.atan2(self.goalY - pos.y, self.goalX - pos.x)
		angle = angle-math.pi*0.5
		
		go.set_rotation(vmath.quat_rotation_z(angle))
		self.needToUpdateRotation=false
	end
    
    if(dir~=pos)then
    	go.set_position(pos-dir*4*dt)
    end
    
end

function goToPos(self,newX,newY)
	self.goalX=newX
	self.goalY=newY
	self.needToUpdateRotation=true
end

function isInsideSelection(startMouse, currentMouse, pivot)
	
	local bounds = getSpriteBounds("#sprite")
	
	--selection
	local RectA={}
	RectA.X1 = startMouse[1]
	RectA.X2 = currentMouse[1]
	RectA.Y1 = startMouse[2]
	RectA.Y2 = currentMouse[2]
	
	--sprite
	local RectB={}
	RectB.X1 = bounds[1]
	RectB.X2 = bounds[2]
	RectB.Y1 = bounds[3]
	RectB.Y2 = bounds[4]
	
	local spriteWidth=math.abs(bounds[1]-bounds[2])
	local spriteHeight=math.abs(bounds[3]-bounds[4])
	
	--if SW - no change, we now want to adjust so that pivot is SW
	--if SE - switch X1 and X2
	if(pivot == gui.PIVOT_SE)then
		local oldX1=RectA.X1
		RectA.X1 = RectA.X2
		RectA.X2 = oldX1
	--if NW - switch
	elseif(pivot == gui.PIVOT_NW)then
		RectA.Y1 = RectA.Y1+spriteHeight
		RectA.Y2 = RectA.Y2+spriteHeight
	--if NE - move up and right
	elseif(pivot==gui.PIVOT_NE)then
		RectA.X1 = RectA.X1+spriteWidth
		RectA.X2 = RectA.X2+spriteWidth
		RectA.Y1 = RectA.Y1+spriteHeight
		RectA.Y2 = RectA.Y2+spriteHeight
	else
		print("RECTA.X1: "..RectA.X1.." RECTA.X2: "..RectA.X2)
		--print("SW!")
	end
    
    if(RectA.X1 < RectB.X2 and RectA.X2 > RectB.X1 and
       RectA.Y1 < RectB.Y2 and RectA.Y2 > RectB.Y1) then
    	return true
    end
	
	return false
end

function on_message(self, message_id, message, sender)

	--message that some unit is single-selected, check if the unit is self
	--if not us, deselect self because some other unit is in focus
	if message_id==hash("unitSelected") then
		if message.selectedId ~= go.get_id() then
			deselect(self)
		end
		
	--check if self is inside the selection, if it is, select itself
	elseif message_id==hash("massSelection") then
		if isInsideSelection(message.start,message.current,message.pivot) then
			print("inside pivot")
		end
 	end

end

function getSpriteBounds(id)
	local pos = go.get_position(id)
	
	local Xmin = pos.x-go.get(id, "size.x")/2*go.get(id, "scale.x")
	local Ymin = pos.y-go.get(id, "size.y")/2*go.get(id, "scale.y")
	local Xmax = pos.x+go.get(id, "size.x")*0.5*go.get(id, "scale.x")
	local Ymax = pos.y+go.get(id, "size.y")*0.5*go.get(id, "scale.y")
	
	return {Xmin,Xmax,Ymin,Ymax}
end

function isSpriteHit(action)

	
	if ((action.x > getSpriteBounds("#sprite")[1] and action.x < getSpriteBounds("#sprite")[2]) and 
		(action.y > getSpriteBounds("#sprite")[3] and action.y < getSpriteBounds("#sprite")[4])) then
    	return true
	end
	
	return false
end

function select(self,title)
	self.selected=true
    go.set_scale(self.initialScale*1.2)
    
    
    msg.post("HUD","setLeftTitle",{text=title})
    
    msg.post("manager","unitSelected",{selectedId=go.get_id()})
end

function massSelect(self,title)
	self.selected=true
end

function deselect(self)
	self.selected=false
    go.set_scale(self.initialScale)
end

function on_input(self, action_id, action)

    --when left click, make sure that the player actually hit our sprite
    
    
    if action_id == hash("leftClicked") and action.pressed and isSpriteHit(action) then
    	if self.selected==false then
    		select(self,JEEP_NAME)
    	else
    		deselect(self)
    	end
    	
    --if right click, no need to make sure that the sprite is hit, however the unit must be selected
    
    elseif action_id == hash("rightClicked") and action.pressed and self.selected then    	
		goToPos(self,action.x,action.y)
    end 
    
    
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
