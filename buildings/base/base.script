


function init(self)

	self.go=go
	
	self.x=go.get_position().x
	self.y=go.get_position().y
	
	self.initialScale=0.7
	self.fogRadius=BASE_FOG_RADIUS
	
    initBasicUnit(self,BASE_NAME,go.get_id())
	initBuilding(self,sprite,{startPointFromCenter={x=-1,y=0},width=2,height=4},go)
	initProductionUnit(self)
	
	self.parseInput=function(self, action_id, action)
		
		buildingInput(self,action,action_id)
	end
	
	local buildRedBloodCellAction=function() 
		queueRedBloodCell(self)
	end
	
	self.productionComplete=function(itemName,self)
		if itemName==RBC_NAME then
			redBloodCellDone(self)
		end
	end
	
	self.requiresGUI=true
	
	local deselectAction=function() msg.post("manager","deselectAll",{}) end
	
	self.GUILayout={button1={text="Deselect", action=deselectAction, hover=function() return HOVER_LAYOUT[DESELECT]  end},
					button2={text="Build Red Blood Cell", action=buildRedBloodCellAction, hover=function() return HOVER_LAYOUT[RBC_NAME] end},
					button3=nil,
					button4=nil,
					button5=nil,
					button6=nil,
					button7=nil,
					button8=nil,
					button9=nil,
					productionButton1={text="",action=productionButton1Pressed, hover=function() return HOVER_LAYOUT[CANCEL_PRODUCTION] end},
					productionButton2={text="",action=productionButton2Pressed, hover=function() return HOVER_LAYOUT[CANCEL_PRODUCTION] end},
					productionButton3={text="",action=productionButton3Pressed, hover=function() return HOVER_LAYOUT[CANCEL_PRODUCTION] end},
					productionButton4={text="",action=productionButton4Pressed, hover=function() return HOVER_LAYOUT[CANCEL_PRODUCTION] end}}

					
end

function queueRedBloodCell(self)
	--do we have the resources?
	if canAfford(RBC_NAME) then
		if table.getn(self.toProduce)<MAX_PRODUCTION_QUEUE then
			deductResources(RBC_NAME)
			table.insert(self.toProduce,RBC_NAME)
		end
	else
		msg.post("HUD","displayErrorMessage",{text=NOT_ENOUGH_RESOURCES})
	end
end

function redBloodCellDone(self)
	msg.post("unitManager", "newJeep", {position=vmath.vector3(self.x,self.y,1)}) 
end


function update(self, dt)

    buildingUpdate(self,dt,go)
    updateProductionUnit(self,dt)
    
end

function on_message(self, message_id, message, sender)

	handleSelectMethods(self,go,message_id,message)

end





