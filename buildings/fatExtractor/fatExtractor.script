


function init(self)

	self.go=go
	
	self.x=go.get_position().x
	self.y=go.get_position().y
	self.willBecomeBuilding=true
	self.initialScale=0.5
	self.constructionScale=0.5
	self.fogRadius=BASE_FOG_RADIUS
	
	self.boundsWidthScale=0.5
	self.boundsHeightScale=0.4
	
	self.willBecomeBuilding=true
	self.factory=factory
	
	self.isFatExtractor=true
	self.isBuilding=true
	
    initBasicUnit(self,FAT_EXTRACTOR_NAME,go.get_id())
	initBuilding(self,sprite,{startPointFromCenter={x=-1,y=-1},width=2,height=2},go)
	initExtractor(self)
	
	self.parseInput=function(self, action_id, action)
		
		buildingInput(self,action,action_id)
	end
	
		self.requiresGUI=true
	local deselectAction=function() msg.post("manager","deselectAll",{}) end
	self.GUILayout={button1={text="Deselect",action=deselectAction,hover=function() return HOVER_LAYOUT[DESELECT]  end},
					button2=nil,
					button3=nil,
					button4=nil,
					button5=nil,
					button6=nil,
					button7=nil,
					button8=nil,
					button9=nil}
					
					
	self.GUILayoutComplete={button1={text="Deselect",action=deselectAction,hover=function() return HOVER_LAYOUT[DESELECT]  end},
					button2=nil,
					button3=nil,
					button4=nil,
					button5=nil,
					button6=nil,
					button7=nil,
					button8=nil,
					button9=nil,
					productionButton1={icon="RBCIcon",action=productionButton1PressedExtractor, hover=function() return HOVER_LAYOUT[RELEASE_WORKER] end},
					productionButton2={icon="RBCIcon",action=productionButton2PressedExtractor, hover=function() return HOVER_LAYOUT[RELEASE_WORKER] end},
					productionButton3={icon="RBCIcon",action=productionButton3PressedExtractor, hover=function() return HOVER_LAYOUT[RELEASE_WORKER] end},
					productionButton4={icon="RBCIcon",action=productionButton4PressedExtractor, hover=function() return HOVER_LAYOUT[RELEASE_WORKER] end}}
					
	
	if not IN_GAME then
		spawnNow(self,go.get_position().x,go.get_position().y)
	end
					
end


function update(self, dt)

    basicUnitUpdate(self,dt,go)
    buildingUpdate(self,dt,go)
    updateExtractor(self,dt)
    
end



function on_message(self, message_id, message, sender)

	handleSelectMethods(self,go,message_id,message)
	basicUnitMessageHandler(self,go,message_id,message,sender)
	buildingMessageHandler(self,go,message_id,message,sender)
	extractorMessages(self, message_id, message, sender)
	
	if message_id == hash("deleteGO")then
		go.delete(go.get_id())
	end

end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end


