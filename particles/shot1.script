

function init(self)
    
	self.timerToDie=0.0
	self.DIE_THRESHOLD = 1.0
	
	self.lastDirX=0
    
   -- particlefx.play("#particlefx")
   	
    go.set_scale(1)
    
    self.dir=vmath.vector3(8000,0,0)
    self.speed=1000
    self.alive=true
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)

	local pos = go.get_position()
	pos=pos+self.dir*dt
	
	
	go.set_position(pos)  
	
	self.timerToDie=self.timerToDie+(2*dt)  
	
	if self.timerToDie > self.DIE_THRESHOLD then
		die(self)
	end

end

function die(self)
	go.delete(go.get_id())
	self.alive=false
	
	BULLET_OWNER[go.get_id()]=nil
	BULLET_HIT_ALREADY[go.get_id()]=nil
	
	if ALIVE[self.ownerId] then
		msg.post(self.ownerUrl,"resetCurrentShot",{})
	end
end

function on_message(self, message_id, message, sender)

	if message_id==hash("setOwnerUrl") then
		self.ownerUrl=msg.url(message.id)
		self.ownerId=message.id
		self.ownerName=message.name
	elseif message_id==hash("die")then
		die(self)
	elseif message_id==hash("setDirection")then
		self.dir=message.dir*self.speed
	elseif message_id==hash("setTeam")then
		self.team=message.team
	elseif message_id==hash("requestOwner")then
	
		local damage=HIT_DAMAGE[self.ownerName]
		
		if self.team==PLAYER_TEAM and self.ownerName==SOLDIER_NAME then
			damage=damage+NUMBER_BOUGHT[UPGRADE_SOLDIER_NAME]
		end

		msg.post(sender,"shotOwnerCallback",{ownerId=self.ownerId, team=self.team, damage=damage})
	
	 
	end    

end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
