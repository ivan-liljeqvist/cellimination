function init(self)
	self.progressBars={}
	self.originalProgressWidth = gui.get_size(gui.get_node("progressBox")).x
end

function makeProgressbar(self,unitId)
	
	if not self.progressBars[unitId] then
		
		self.progressBars[unitId]=gui.clone(gui.get_node("progressBox"))
		gui.set_color(self.progressBars[unitId], vmath.vector4(1,1,1,0))
	end
end

function deleteProgressbar(self,unitId)
	if self.progressBars[unitId] then
		gui.delete_node(self.progressBars[unitId])
		self.progressBars[unitId]=nil
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("setPosition") then
	
		
		if self.progressBars[message.unitId] then
	   		gui.set_position(self.progressBars[message.unitId],message.position)
	   		
	   		if GAME_PAUSED then 
  				gui.set_color(self.progressBars[message.unitId],vmath.vector4(0,0,0,0))
  			else
  				gui.set_color(self.progressBars[message.unitId],vmath.vector4(1,1,1,1))
  			end
  			
	   	else
	   		deleteProgressbar(self,message.unitId)
	   	end
	   	
	elseif message_id == hash("show") then
	   	makeProgressbar(self,message.unitId)
	elseif message_id == hash("hide") then
		deleteProgressbar(self,message.unitId)
	elseif message_id == hash("updateSize") then
   		--we get a message with the ratio progress/maxProgress - set the width to that ratio
   		local newWidth = self.originalProgressWidth*(1-message.ratio)
   		local size = gui.get_size(self.progressBars[message.unitId])
   		size.x=newWidth
   		gui.set_size(self.progressBars[message.unitId],size)
   		
   	elseif message_id==hash("makeWhite")then
   		if not GAME_PAUSED and self.progressBars[message.unitId] then
   			gui.set_color(self.progressBars[message.unitId], vmath.vector4(1,1,1,0.5))
   		end
	end
end


