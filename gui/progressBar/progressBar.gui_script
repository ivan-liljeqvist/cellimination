function init(self)
    
	self.currentColor = vmath.vector4(1,1,1,0.5)
	self.originalWidth = gui.get_size(gui.get_node("progressBox")).x
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
   
   --make the healthbar follow the unit
   if message_id == hash("setPosition") then
   		message.position.y=message.position.y+20
   		gui.set_position(gui.get_node("progressBox"),message.position)
   	
   --hide healthbar
   elseif message_id == hash("hide") then
   		gui.set_color(gui.get_node("progressBox"),vmath.vector4(0,0,0,0))
   		
   	--show healthbar
   	elseif message_id == hash("show") then
   		gui.set_color(gui.get_node("progressBox"),self.currentColor)
   		
   	
   	--make the size of the healthbar proporionate to the health
   	elseif  message_id == hash("updateSize")then
   		--we get a message with the ratio progress/maxProgress - set the width to that ratio
   		local newWidth = self.originalWidth*(1-message.ratio)
   		local size = gui.get_size(gui.get_node("progressBox"))
   		size.x=newWidth
   		gui.set_size(gui.get_node("progressBox"),size)
   end
   
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
