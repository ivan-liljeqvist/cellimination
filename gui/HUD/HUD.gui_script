


HUDButtons={}

LEFT_ACTION_BUTTON="action"
RIGHT_BUILD_BUTTON="buildAction"

NO_BUTTON=""

currentlyHitButton=NO_BUTTON;

local uglyFlag=false

local releasedSinceLast=true

function init(self)
    
   --register all buttons
   addButton(LEFT_ACTION_BUTTON)
   addButton(RIGHT_BUILD_BUTTON)
   
   --msg.post(".", "acquire_input_focus")
  
       
end

function checkIfAnyButtonClicked(action,action_id)
	
	if action.pressed and action_id==hash("leftClicked") and releasedSinceLast then
	
		GUI_CLICKED=false
		
		--go through all buttons on the HUD 
		releasedSinceLast=false
		for _,buttonObject in  pairs(HUDButtons) do 
		
			local id=buttonObject.id
			--check if click is inside the button
			if isButtonHit(action,id) and buttonObject.visible then
				GUI_CLICKED=true
				highlightButton(id)
				currentlyHitButton=id
				--send the id to the handler of the click
				handleButtonClicked(id)
			end
		end
	--if released, just dehighlight the current button
	elseif action.released then
		releasedSinceLast=true
		dehighlightButton(currentlyHitButton)
		currentlyHitButton=NO_BUTTON
	end
end

function handleButtonClicked(id) 
	print("handle click: "..id)
	
	if id==RIGHT_BUILD_BUTTON and uglyFlag==false then
		msg.post("buildingManager", "newBase")
	else
		msg.post("unitManager", "newJeep")
	end
	
end


function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    local selected=getSelectedUnits()
    
    local selectionTextNew=""
    
    hideButton(RIGHT_BUILD_BUTTON)
    
    for key,value in pairs(selected) do 
    
	  	selectionTextNew=selectionTextNew..value.." "..key.."\n"
	  	
	  	if key==WORKER_NAME then
	  		showButton(RIGHT_BUILD_BUTTON)
	  		gui.set_text(gui.get_node(RIGHT_BUILD_BUTTON.."/text"),"Build base")
	  		uglyFlag=false
	  	elseif key==BASE_NAME then
	  		showButton(RIGHT_BUILD_BUTTON)
	  		gui.set_text(gui.get_node(RIGHT_BUILD_BUTTON.."/text"),"Build jeep")
	  		uglyFlag=true
	  	end
	end
	
	if(self.selectionText==nil)then
		self.selectionText = gui.get_node("selectionText")
	end
	gui.set_text(self.selectionText,selectionTextNew)

end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
    
    if message_id == hash("setLeftTitle") then
    	self.leftTitle = gui.get_node("leftTitle")
    	gui.set_text(self.leftTitle,message.text)
    	
    	if(message.text==BASE_NAME)then
    		showButton(LEFT_ACTION_BUTTON)
			gui.set_text(gui.get_node("action/text"),"Build fisher")
		else
			hideButton(LEFT_ACTION_BUTTON)
    	end
    	
    end
    
    if message_id==hash("newInput") then
		checkIfAnyButtonClicked(message.action,message.action_id)
	end
end



function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end


--helper methods for button management

function addButton(id)
	HUDButtons[id]={id=id,visible=false}
	hideButton(id)
end

function getButtonBounds(id)

	
	local boxNode=gui.get_node(id.."/box")
	local pos=gui.get_position(boxNode)
	local size=gui.get_size(boxNode)
	
	local Xmin = pos.x
	local Ymin = pos.y
	local Xmax = pos.x+size.x
	local Ymax = pos.y+size.y
	
	return {Xmin,Xmax,Ymin,Ymax}
end

function isButtonHit(action,id)

	
	if ((action.x > getButtonBounds(id)[1] and action.x < getButtonBounds(id)[2]) and 
		(action.y > getButtonBounds(id)[3] and action.y < getButtonBounds(id)[4])) then
    	return true
	end
	
	return false
end

function hideButton(id)
   gui.set_color(gui.get_node(id.."/text"), vmath.vector4(0, 0, 0, 0))
   gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 0, 0, 0))
   
   HUDButtons[id]={id=id,visible=false}
end

--not highlighting cuz it overrides in update each loop

function highlightButton(id)
	
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 1, 0, 1))
	end
end

function dehighlightButton(id)
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 0, 0, 1))
	end
end

function showButton(id)
	gui.set_color(gui.get_node(id.."/text"), vmath.vector4(1, 1, 1, 1))
    gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 0, 0, 1))
    
    HUDButtons[id]={id=id,visible=true}
end
