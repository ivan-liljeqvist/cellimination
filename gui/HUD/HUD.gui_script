



unitWithGUI={}


local releasedSinceLast=true
local currentLayout={}

local sinceUpdatedLarge=0
local missionChar=1

local currentSubtitleNode=1


function init(self)
    
   --register all buttons
   addButton(BUTTON1)
   addButton(BUTTON2)
   addButton(BUTTON3)
   addButton(BUTTON4)
   addButton(BUTTON5)
   addButton(BUTTON6)
   addButton(BUTTON7)
   addButton(BUTTON8)
   addButton(BUTTON9)
   
   addButton(PRODUCTION_BUTTON1)
   addButton(PRODUCTION_BUTTON2)
   addButton(PRODUCTION_BUTTON3)
   addButton(PRODUCTION_BUTTON4)
   
   hideUnitCostAndDesc()
 
 	self.storageColorRed=false
 	self.timeSinceSwitchedStorageColor=0
 	
 	self.houseColorRed=false
 	self.timeSinceSwitchedHouseColor=0
 	
 	self.topBarFadeOut=true

 	gui.set_text(gui.get_node("topBigText"),"")

	gui.animate(gui.get_node("topBigText"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0.5), gui.EASING_INOUTQUAD, 0.5, 0.0, on_animation_done)
 	


end

function on_animation_done(self, node)
 		if self.topBarFadeOut then
    		gui.animate(node, gui.PROP_COLOR, vmath.vector4(1,1, 1, 1), gui.EASING_OUTQUAD, 0.8, 0.0, on_animation_done)
    		self.topBarFadeOut=false
    	else
    		gui.animate(gui.get_node("topBigText"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0.5), gui.EASING_INOUTQUAD, 0.8, 0.0, on_animation_done)
    		self.topBarFadeOut=true
    	end
end




function update(self, dt)
    
    local selectionTextNew=""
    local foundSelectedWithGUI=false
    
    updateResourcesLabels()
    updateStorageAndHouseLabels(self,dt)
    


	if displayingError then
		if displayingErrorTimeSinceStarted<displayingErrorTime then
			displayingErrorTimeSinceStarted=displayingErrorTimeSinceStarted+dt
		else
			displayingError=false
			displayingErrorTimeSinceStarted=0
			displayingErrorTime=3
		end
	else
		gui.set_text(gui.get_node("errorText"), "")
	end

    local selectedUnits=updateSelectedUnits(self)
   
   upgradeInfoUpdate()
   
   if unitWithGUI.producer then
   		showProductionSection()
   		updateProductionPercentage()
   
   else
   		hideProductionSection()
   end
   
   applyGUILayout(unitWithGUI.GUILayout)
   
   
   currentLayout=unitWithGUI.GUILayout
   

	if selectedUnits<=0 then
   		hideEverything()
	end
	
	sinceUpdatedLarge=sinceUpdatedLarge+dt
	--[[
	if sinceUpdatedLarge>0.1 then
		local text="21:30, kidney"
		local textToDisplay=string.sub(text, 0, missionChar)
		
		gui.set_text(gui.get_node("largeText"),textToDisplay)
		missionChar=missionChar+1
		sinceUpdatedLarge=0
	end--]]
end


function upgradeInfoUpdate()

	local text="WHITE BLOOD CELL HIT LVL: "..(NUMBER_BOUGHT[UPGRADE_SOLDIER_NAME]+1)..
				"   STEM CELL HEAL LVL: "..(NUMBER_BOUGHT[UPGRADE_HEALER_NAME]+1)..
				"   MONOCYTE MOBILITY LEVEL: "..(NUMBER_BOUGHT[UPGRADE_TANK_NAME]+1)..
				"   HP BOOST: "..(NUMBER_BOUGHT[UPGRADE_HEALTH_NAME]+1)
	

	
	gui.set_text(gui.get_node("upgradeText"),text)

end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
    
    if message_id==hash("newInput") then
		checkIfAnyButtonClicked(message.action,message.action_id)
	elseif message_id == hash("setGameOverTitle") then
		gui.set_text(gui.get_node("gameOverTitle"),message.text)
	elseif message_id == hash("setGameOverText") then
		gui.set_text(gui.get_node("gameOverText"),message.text)
	elseif message_id==hash("unitDestroyed")then
		if unitWithGUI then
			if unitWithGUI.id==message.id then
				unitWithGUI={}
			end
		else
			unitWithGUI={}
		end
	elseif message_id==hash("refreshLayout")then
		
	elseif message_id==hash("displayErrorMessage")then
	
		if message.text==NOT_ENOUGH_RESOURCES then
			msg.post("mixer","notEnoughResources")
		end
		--errorText
		displayingError=true
		displayingErrorTimeSinceStarted=0
		gui.set_text(gui.get_node("errorText"), message.text)
	
	elseif message_id==hash("setMissionObjectiveText")then
		if message.text~="" then
			gui.set_color(gui.get_node("objectivesTitle"),vmath.vector4(1,1,1,1))
		else
			gui.set_color(gui.get_node("objectivesTitle"),vmath.vector4(1,1,1,0))
		end
		gui.set_text(gui.get_node("objectiveText"), message.text)
	
	elseif message_id==hash("setTopBigText") then
		--print("setTopBigText "..message.text)
		gui.set_text(gui.get_node("topBigText"),message.text)
	elseif message_id==hash("setSubtitleText") then
	
		--print("setSubtitleText "..message.text)
		local function on_animation_done(self, node)
		    
		    if currentSubtitleNode == 1 then
		    	gui.animate(gui.get_node("subtitleText2"), gui.PROP_POSITION, vmath.vector3(964, 197,0), gui.EASING_INOUTQUAD,0.1)
		    else
		    	gui.animate(gui.get_node("subtitleText1"), gui.PROP_POSITION, vmath.vector3(964, 197,0), gui.EASING_INOUTQUAD,0.1)
		    end

		end

		if currentSubtitleNode==1 then
		
			--gui.set_text(gui.get_node("subtitleText1"), "")
			gui.set_text(gui.get_node("subtitleText2"), message.text)
			currentSubtitleNode=2
			
			gui.animate(gui.get_node("subtitleText2"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.4)
			gui.animate(gui.get_node("subtitleText1"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUTQUAD, 0.4,0.0,on_animation_done)
			gui.animate(gui.get_node("subtitleText1"), gui.PROP_POSITION, vmath.vector3(964, 237,0), gui.EASING_INOUTQUAD, 0.4,0.0,on_animation_done)
			
		elseif currentSubtitleNode==2 then
		
			--gui.set_text(gui.get_node("subtitleText2"), "")
			gui.set_text(gui.get_node("subtitleText1"), message.text)
			currentSubtitleNode=1
			
			gui.animate(gui.get_node("subtitleText1"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.4)
			gui.animate(gui.get_node("subtitleText2"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUTQUAD, 0.4,0.0,on_animation_done)
			gui.animate(gui.get_node("subtitleText2"), gui.PROP_POSITION, vmath.vector3(964, 237,0), gui.EASING_INOUTQUAD, 0.4)
			
		end
			
			
	end
end

























-----------------  MESS APPROACHING -----------------------------------




































-----------------  BEWARE  -----------------------------------




































function hideUnitCostAndDesc()
   hideNode(COST_CARB_ICON)
   hideNode(COST_FAT_ICON)
   hideNode(COST_PROTEIN_ICON)
   
   hideNode(COST_CARB)
   hideNode(COST_PROTEIN)
   hideNode(COST_FAT)
   
   hideNode(UNIT_DESCRIPTION)
end




function displayNodesOnHover(nodesToDisplay)

	if nodesToDisplay then
		if nodesToDisplay.price and nodesToDisplay.description then
			showUnitCostAndDesc()

			
			local carbPrice=math.ceil(nodesToDisplay.price.carb+(NUMBER_BOUGHT[nodesToDisplay.name]+1+NUMBER_QUEUED[nodesToDisplay.name])*INFLATION[nodesToDisplay.name])
			local proteinPrice=math.ceil(nodesToDisplay.price.protein+(NUMBER_BOUGHT[nodesToDisplay.name]+1+NUMBER_QUEUED[nodesToDisplay.name])*INFLATION[nodesToDisplay.name])
			local fatPrice=math.ceil(nodesToDisplay.price.fat+(NUMBER_BOUGHT[nodesToDisplay.name]+1+NUMBER_QUEUED[nodesToDisplay.name])*INFLATION[nodesToDisplay.name])
			
			if nodesToDisplay.name==STORAGE_NAME then
				proteinPrice=math.floor(PROTEIN*0.05)
				carbPrice=math.floor(CARBS*0.05)
				fatPrice=math.floor(FAT*0.05)
			end
			
			setCarbPrice(carbPrice)
			setProteinPrice(proteinPrice)
			setFatPrice(fatPrice)
			
			setUnitDescription(nodesToDisplay.description,nodesToDisplay.name)
			
		elseif nodesToDisplay.description then
			showNode(UNIT_DESCRIPTION)
			setUnitDescription(nodesToDisplay.description,nodesToDisplay.name)
		else
			hideUnitCostAndDesc()
		end
	else
		hideUnitCostAndDesc()
	end

end




function hideProductionSection()
   hideButton(PRODUCTION_BUTTON1)
   hideButton(PRODUCTION_BUTTON2)
   hideButton(PRODUCTION_BUTTON3)
   hideButton(PRODUCTION_BUTTON4)
   hideNode(PRODUCTION_TITLE)
   hideNode(PRODUCTION_PERCENT)
end




function showProductionSection()

	local producer=unitWithGUI
   
	local numToProduce = table.getn(producer.toProduce)

	if numToProduce>= 1 then
   		showButton(PRODUCTION_BUTTON1)
   		setIconForButton(PRODUCTION_BUTTON1,ICONS[unitWithGUI.currentlyProducingItem])
   	else
   		hideButton(PRODUCTION_BUTTON1)
   	end
   	if numToProduce>=2 then
   		showButton(PRODUCTION_BUTTON2)
   		setIconForButton(PRODUCTION_BUTTON2,ICONS[unitWithGUI.toProduce[2]])
   	else
   		hideButton(PRODUCTION_BUTTON2)
   	end
   	if numToProduce>=3 then
   		showButton(PRODUCTION_BUTTON3)
   		setIconForButton(PRODUCTION_BUTTON3,ICONS[unitWithGUI.toProduce[3]])
   	else
   		hideButton(PRODUCTION_BUTTON3)
   	end
   	if numToProduce>=4 then
   		showButton(PRODUCTION_BUTTON4)
   		setIconForButton(PRODUCTION_BUTTON4,ICONS[unitWithGUI.toProduce[4]])
   	else
   		hideButton(PRODUCTION_BUTTON4)
   	end
   	
   	showNode(PRODUCTION_TITLE)
   	showNode(PRODUCTION_PERCENT)
   	

   	
   	if unitWithGUI.producer and string.len(unitWithGUI.currentlyProducingItem)>0 and not unitWithGUI.isExtractor then
   		gui.set_text(gui.get_node(PRODUCTION_TITLE),"Making "..unitWithGUI.currentlyProducingItem)
   	elseif unitWithGUI.isExtractor and unitWithGUI.producer and string.len(unitWithGUI.currentlyProducingItem)>0 then
   		gui.set_text(gui.get_node(PRODUCTION_TITLE),unitWithGUI.workersInside.." cells inside\n(click on one to make it leave)")
   	else	
   		gui.set_text(gui.get_node(PRODUCTION_TITLE),"")
   	end
   	

end

function setIconForButton(buttonId,iconId)

	if iconId and buttonId then
		gui.set_texture(gui.get_node(buttonId.."/icon"), "gui")
		gui.play_flipbook(gui.get_node(buttonId.."/icon"), iconId)
	end
	
end


function applyGUILayout(layout)
	if layout then
		if layout.button1 then
			showButtonWithIcon(BUTTON1,layout.button1.icon)
			
		else
			hideButton(BUTTON1)
		end
		
		if layout.button2 then	
			showButtonWithIcon(BUTTON2,layout.button2.icon)
			showButton(BUTTON2)
		else
			hideButton(BUTTON2)
		end
		
		if layout.button3 then
			showButtonWithIcon(BUTTON3,layout.button3.icon)
			showButton(BUTTON3)
		else
			hideButton(BUTTON3)
		end
		
		if layout.button4 then
			showButtonWithIcon(BUTTON4,layout.button4.icon)
			showButton(BUTTON4)
		else
			hideButton(BUTTON4)
		end
		
		if layout.button5 then
			showButtonWithIcon(BUTTON5,layout.button5.icon)
			showButton(BUTTON5)
		else
			hideButton(BUTTON5)
		end
		
		if layout.button6 then
			showButtonWithIcon(BUTTON6,layout.button6.icon)
			showButton(BUTTON6)
		else
			hideButton(BUTTON6)
		end
		
		if layout.button7 then
			showButtonWithIcon(BUTTON7,layout.button7.icon)
			showButton(BUTTON7)
		else
			hideButton(BUTTON7)
		end
		
		if layout.button8 then
			showButtonWithIcon(BUTTON8,layout.button8.icon)
			showButton(BUTTON8)
		else
			hideButton(BUTTON8)
		end
		
		if layout.button9 then
			showButtonWithIcon(BUTTON9,layout.button9.icon)
			showButton(BUTTON9)
		else
			hideButton(BUTTON9)
		end
	else
		hideButton(BUTTON1)
		hideButton(BUTTON2)
		hideButton(BUTTON3)
		hideButton(BUTTON4)
		hideButton(BUTTON5)
		hideButton(BUTTON6)
		hideButton(BUTTON7)
		hideButton(BUTTON8)
		hideButton(BUTTON9)
		
	end
end

function checkIfAnyButtonClicked(action,action_id)

	--check if hovered

	local hoverAtLeastOne=false
	for _,buttonObject in  pairs(HUDButtons) do 
	
		if buttonObject.visible then
			local id=buttonObject.id
			--check if click is inside the button
			if isButtonHit(action,id) then
				--send the id to the handler of the click
				handleButtonHovered(id)
				hoverAtLeastOne=true
			end
		end
	end
	
	if hoverAtLeastOne==false then hideUnitCostAndDesc() end
	
	--check if clicked
	
	if action.pressed and action_id==hash("leftClicked") and releasedSinceLast then
	
		GUI_CLICKED=false
		
		--go through all buttons on the HUD 
		releasedSinceLast=false
		for _,buttonObject in  pairs(HUDButtons) do 
		
			local id=buttonObject.id
			--check if click is inside the button
			if isButtonHit(action,id) and buttonObject.visible then
				GUI_CLICKED=true
				highlightButton(id)
				currentlyHitButton=id
				--send the id to the handler of the click
				handleButtonClicked(id)
				
			end
		end
	--if released, just dehighlight the current button 
	elseif action.released then
		releasedSinceLast=true
		dehighlightButton(currentlyHitButton)
		currentlyHitButton=NO_BUTTON
	end
end

function handleButtonClicked(id) 

	if id==BUTTON1 then
		currentLayout.button1.action()
	elseif id==BUTTON2 then
		currentLayout.button2.action()
	elseif id==BUTTON3 then
		currentLayout.button3.action()
	elseif id==BUTTON4 then
		currentLayout.button4.action()
	elseif id==BUTTON5 then
		currentLayout.button5.action()
	elseif id==BUTTON6 then
		currentLayout.button6.action()
	elseif id==BUTTON7 then
		currentLayout.button7.action()
	elseif id==BUTTON8 then
		currentLayout.button8.action()
	elseif id==BUTTON9 then
		currentLayout.button9.action()
	elseif id==PRODUCTION_BUTTON1 then
		
		currentLayout.productionButton1.action(unitWithGUI)
	elseif id==PRODUCTION_BUTTON2 then
		currentLayout.productionButton2.action(unitWithGUI)
	elseif id==PRODUCTION_BUTTON3 then
		currentLayout.productionButton3.action(unitWithGUI)
	elseif id==PRODUCTION_BUTTON4 then
		currentLayout.productionButton4.action(unitWithGUI)
	end
	
end


function handleButtonHovered(id) 

	--each hover() returns an object telling which objects to display on hover
	if id==BUTTON1 then
		displayNodesOnHover(currentLayout.button1.hover())
	elseif id==BUTTON2 then
		displayNodesOnHover(currentLayout.button2.hover())
	elseif id==BUTTON3 then
		displayNodesOnHover(currentLayout.button3.hover())
	elseif id==BUTTON4 then
		displayNodesOnHover(currentLayout.button4.hover())
	elseif id==BUTTON5 then
		displayNodesOnHover(currentLayout.button5.hover())
	elseif id==BUTTON6 then
		displayNodesOnHover(currentLayout.button6.hover())
	elseif id==BUTTON7 then
		displayNodesOnHover(currentLayout.button7.hover())
	elseif id==BUTTON8 then
		displayNodesOnHover(currentLayout.button8.hover())
	elseif id==BUTTON9 then
		displayNodesOnHover(currentLayout.button9.hover())
	elseif id==PRODUCTION_BUTTON1 then
		displayNodesOnHover(currentLayout.productionButton1.hover())
	elseif id==PRODUCTION_BUTTON2 then
		displayNodesOnHover(currentLayout.productionButton2.hover())
	elseif id==PRODUCTION_BUTTON3 then
		displayNodesOnHover(currentLayout.productionButton3.hover())
	elseif id==PRODUCTION_BUTTON4 then
		displayNodesOnHover(currentLayout.productionButton4.hover())
	end
	
end






function addButton(id)
	HUDButtons[id]={id=id,visible=false}
	hideButton(id)
end

function getButtonBounds(id)

	
	local boxNode=gui.get_node(id.."/box")
	local pos=gui.get_position(boxNode)
	local size=gui.get_size(boxNode)
	
	local Xmin = pos.x
	local Ymin = pos.y
	local Xmax = pos.x+size.x
	local Ymax = pos.y+size.y
	
	return {Xmin,Xmax,Ymin,Ymax}
end

function isButtonHit(action,id)

	
	if ((action.x > getButtonBounds(id)[1] and action.x < getButtonBounds(id)[2]) and 
		(action.y > getButtonBounds(id)[3] and action.y < getButtonBounds(id)[4])) then
    	return true
	end
	
	return false
end

function hideButton(id)
   gui.set_color(gui.get_node(id.."/text"), vmath.vector4(0, 0, 0, 0))
   gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 0, 0, 0))
   gui.set_color(gui.get_node(id.."/icon"), vmath.vector4(1, 1, 1, 0))
   
   HUDButtons[id]={id=id,visible=false}
end

--not highlighting cuz it overrides in update each loop

function highlightButton(id)
	
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 1, 0, 1))
	end
end

function dehighlightButton(id)
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 0, 0, 1))
	end
end

function showButton(id)
	gui.set_color(gui.get_node(id.."/text"), vmath.vector4(1, 1, 1, 1))
    gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 1, 1, 1))
    gui.set_color(gui.get_node(id.."/icon"), vmath.vector4(1, 1, 1, 1))
    
    HUDButtons[id]={id=id,visible=true}
end

function hideNode(id)
	gui.set_color(gui.get_node(id), vmath.vector4(0, 0, 0, 0))
end

function showNode(id)
	gui.set_color(gui.get_node(id), vmath.vector4(1, 1, 1, 1))
end

function showButtonWithIcon(id,iconId)
	showButton(id)
	
	if iconId then
		gui.set_texture(gui.get_node(id.."/icon"), "gui")
		gui.play_flipbook(gui.get_node(id.."/icon"), iconId)
	end
end



function hideEverything()
		hideButton(BUTTON1)
		hideButton(BUTTON2)
		hideButton(BUTTON3)
		hideButton(BUTTON4)
		hideButton(BUTTON5)
		hideButton(BUTTON6)
		hideButton(BUTTON7)
		hideButton(BUTTON8)
		hideButton(BUTTON9)
		hideProductionSection()
		hideUnitCostAndDesc()
		
end

function updateStorageAndHouseLabels(self,dt)
	updateStorageLabel(self,dt)
	updateHouseLabel(self,dt)
end

function updateHouseLabel(self,dt)

	if TOTAL_POPULATION>=MAX_POPULATION then
		blinkHouse(self,dt)
	else
		gui.set_color(gui.get_node("houseText"), vmath.vector3(1,1,1))
	end
	
	gui.set_text(gui.get_node("houseText"), math.floor(TOTAL_POPULATION).."/"..math.floor(MAX_POPULATION).." population")
end

function updateStorageLabel(self,dt)

	if TOTAL_STORAGE>=MAX_STORAGE then
		blinkStorage(self,dt)
	else
		gui.set_color(gui.get_node("storageText"), vmath.vector3(1,1,1))
	end

	gui.set_text(gui.get_node("storageText"), math.floor(TOTAL_STORAGE).."/"..math.floor(MAX_STORAGE).." storage")
end

function blinkHouse(self,dt)
	if not self.houseColorRed then
		if self.timeSinceSwitchedHouseColor>0.3 then
			gui.set_color(gui.get_node("houseText"), vmath.vector3(1,0,0))
			self.houseColorRed=true
			self.timeSinceSwitchedHouseColor=0
			
			msg.post("HUD","displayErrorMessage",{text=MORE_HOUSE})
		end
	else
		if self.timeSinceSwitchedHouseColor>0.3 then
			gui.set_color(gui.get_node("houseText"), vmath.vector3(1,1,1))
			self.houseColorRed=false
			self.timeSinceSwitchedHouseColor=0
		end
	end
	
	self.timeSinceSwitchedHouseColor=self.timeSinceSwitchedHouseColor+dt
end

function blinkStorage(self,dt)
	if not self.storageColorRed then
		if self.timeSinceSwitchedStorageColor>0.3 then
			gui.set_color(gui.get_node("storageText"), vmath.vector3(1,0,0))
			self.storageColorRed=true
			self.timeSinceSwitchedStorageColor=0
			
			msg.post("HUD","displayErrorMessage",{text=MORE_STORAGE})
		end
	else
		if self.timeSinceSwitchedStorageColor>0.3 then
			gui.set_color(gui.get_node("storageText"), vmath.vector3(1,1,1))
			self.storageColorRed=false
			self.timeSinceSwitchedStorageColor=0
		end
	end
	
	self.timeSinceSwitchedStorageColor=self.timeSinceSwitchedStorageColor+dt
end


    
function updateSelectedUnits(self)
	local selectedUnitsNumberLookup={}
    

    
    local selectedUnits=0
    
    for unit,stillHere in pairs(SELECTED_UNITS) do 
    
    	if stillHere and unit and ALIVE[unit.id] then
    	
    		if selectedUnitsNumberLookup[unit.name]==nil then
    			selectedUnitsNumberLookup[unit.name]=0
    		end
    		
    		selectedUnitsNumberLookup[unit.name]=selectedUnitsNumberLookup[unit.name]+1
    		
    		if unit.requiresGUI then
    			unitWithGUI=unit
    		end
    		
    		selectedUnits=selectedUnits+1
    	end
    end
    
    
   if self.selectionText == nil then
   	   self.selectionText = gui.get_node("selectionText")
   end
   
   local unitWithGUISelected=0
   
   local selectionNewText=""
   for unitName, numberSelected in pairs(selectedUnitsNumberLookup) do
   		if unitName~=unitWithGUI.name then
			selectionNewText=selectionNewText.."\n"..numberSelected.." "..unitName
		else
			unitWithGUISelected=numberSelected
		end
   end
	
   gui.set_text(self.selectionText,selectionNewText)
   
   if unitWithGUISelected>0 then
   		gui.set_text(gui.get_node("topUnit"),unitWithGUISelected.." "..unitWithGUI.name)
   else
   		gui.set_text(gui.get_node("topUnit"),"")
   end
   
   return selectedUnits	
end


function updateResourcesLabels()
	gui.set_text(gui.get_node("proteinText"), math.floor(PROTEIN).." protein")
	gui.set_text(gui.get_node("fatText"), math.floor(FAT).." fat")
	gui.set_text(gui.get_node("carbsText"), math.floor(CARBS).." carbs.")
end










--helper methods for button management


function setCarbPrice(price)
	gui.set_text(gui.get_node("costCarb"),price)
	
	if price>CARBS then
		gui.set_color(gui.get_node("costCarb"), vmath.vector4(1, 0, 0, 1))
	else
		gui.set_color(gui.get_node("costCarb"), vmath.vector4(1, 1, 1, 1))
	end
end

function setProteinPrice(price)
	gui.set_text(gui.get_node("costProtein"),price)
	
	if price>PROTEIN then
		gui.set_color(gui.get_node("costProtein"), vmath.vector4(1, 0, 0, 1))
	else
		gui.set_color(gui.get_node("costProtein"), vmath.vector4(1, 1, 1, 1))
	end
end

function setFatPrice(price)
	gui.set_text(gui.get_node("costFat"),price)
	
	if price>FAT then
		gui.set_color(gui.get_node("costFat"), vmath.vector4(1, 0, 0, 1))
	else
		gui.set_color(gui.get_node("costFat"), vmath.vector4(1, 1, 1, 1))
	end
end

function setUnitDescription(description,unitName)	
	if unitName and string.len(unitName)>0 then
		if unitWithGUI.isEvolution then
			description=unitName.."\n"..description
		else
			description="Build "..unitName.."\n"..description
		end
	end
	gui.set_text(gui.get_node("unitDescription"),description)

end


function updateProductionPercentage()


	if unitWithGUI.currentProductionProgress>0 then
		gui.set_text(gui.get_node(PRODUCTION_PERCENT),math.floor(unitWithGUI.currentProductionProgress*100).." %")
	elseif unitWithGUI.isBuilding and not unitWithGUI.constructionDone then
		gui.set_text(gui.get_node(PRODUCTION_TITLE),UNDER_CONSTRUCTION)
   		gui.set_text(gui.get_node(PRODUCTION_PERCENT),math.floor(unitWithGUI.constructionProgress/unitWithGUI.constructionTime*100).." %")
   	else
  
		hideNode(PRODUCTION_PERCENT)
	end
end

function showUnitCostAndDesc()
   showNode(COST_CARB_ICON)
   showNode(COST_FAT_ICON)
   showNode(COST_PROTEIN_ICON)
   
   showNode(COST_CARB)
   showNode(COST_PROTEIN)
   showNode(COST_FAT)
   
   showNode(UNIT_DESCRIPTION)
end


