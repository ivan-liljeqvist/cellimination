


HUDButtons={}


BUTTON1="hudButton1"
BUTTON2="hudButton2"
BUTTON3="hudButton3"
BUTTON4="hudButton4"
BUTTON5="hudButton5"
BUTTON6="hudButton6"
BUTTON7="hudButton7"
BUTTON8="hudButton8"
BUTTON9="hudButton9"

NO_BUTTON=""

currentlyHitButton=NO_BUTTON;

local uglyFlag=false

local releasedSinceLast=true

local currentLayout={}

function init(self)
    
   --register all buttons
   addButton(BUTTON1)
   addButton(BUTTON2)
   addButton(BUTTON3)
   addButton(BUTTON4)
   addButton(BUTTON5)
   addButton(BUTTON6)
   addButton(BUTTON7)
   addButton(BUTTON8)
   addButton(BUTTON9)
   

       
end

function checkIfAnyButtonClicked(action,action_id)
	
	if action.pressed and action_id==hash("leftClicked") and releasedSinceLast then
	
		GUI_CLICKED=false
		
		--go through all buttons on the HUD 
		releasedSinceLast=false
		for _,buttonObject in  pairs(HUDButtons) do 
		
			local id=buttonObject.id
			--check if click is inside the button
			if isButtonHit(action,id) and buttonObject.visible then
				GUI_CLICKED=true
				highlightButton(id)
				currentlyHitButton=id
				--send the id to the handler of the click
				handleButtonClicked(id)
			end
		end
	--if released, just dehighlight the current button
	elseif action.released then
		releasedSinceLast=true
		dehighlightButton(currentlyHitButton)
		currentlyHitButton=NO_BUTTON
	end
end

function handleButtonClicked(id) 


	if id==BUTTON1 then
		currentLayout.button1.action()
	elseif id==BUTTON2 then
		currentLayout.button2.action()
	elseif id==BUTTON3 then
		currentLayout.button3.action()
	elseif id==BUTTON4 then
		currentLayout.button4.action()
	elseif id==BUTTON5 then
		currentLayout.button5.action()
	elseif id==BUTTON6 then
		currentLayout.button6.action()
	elseif id==BUTTON7 then
		currentLayout.button7.action()
	elseif id==BUTTON8 then
		currentLayout.button8.action()
	elseif id==BUTTON9 then
		currentLayout.button9.action()
	end
	
end


function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    
    local selectionTextNew=""
    local foundSelectedWithGUI=false
    local unitWithGUI={}
    
    local selectedUnitsNumberLookup={}
    
    for unit,stillHere in pairs(SELECTED_UNITS) do 
    
    	if stillHere then
    	
    		if selectedUnitsNumberLookup[unit.name]==nil then
    			selectedUnitsNumberLookup[unit.name]=0
    		end
    		
    		selectedUnitsNumberLookup[unit.name]=selectedUnitsNumberLookup[unit.name]+1
    		
    		if unit.requiresGUI then
    			unitWithGUI=unit
    		end
    		
    	end
    end
    
   if self.selectionText == nil then
   	   self.selectionText = gui.get_node("selectionText")
   end
   
   local selectionNewText=""
   for unitName, numberSelected in pairs(selectedUnitsNumberLookup) do
		selectionNewText=selectionNewText.."\n"..numberSelected.." "..unitName
   end
	
   gui.set_text(self.selectionText,selectionNewText)	
   
   applyGUILayout(unitWithGUI.GUILayout)
   
   currentLayout=unitWithGUI.GUILayout

end


function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
    
    if message_id==hash("newInput") then
		checkIfAnyButtonClicked(message.action,message.action_id)
	end
end



function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end


--helper methods for button management

function addButton(id)
	HUDButtons[id]={id=id,visible=false}
	hideButton(id)
end

function getButtonBounds(id)

	
	local boxNode=gui.get_node(id.."/box")
	local pos=gui.get_position(boxNode)
	local size=gui.get_size(boxNode)
	
	local Xmin = pos.x
	local Ymin = pos.y
	local Xmax = pos.x+size.x
	local Ymax = pos.y+size.y
	
	return {Xmin,Xmax,Ymin,Ymax}
end

function isButtonHit(action,id)

	
	if ((action.x > getButtonBounds(id)[1] and action.x < getButtonBounds(id)[2]) and 
		(action.y > getButtonBounds(id)[3] and action.y < getButtonBounds(id)[4])) then
    	return true
	end
	
	return false
end

function hideButton(id)
   gui.set_color(gui.get_node(id.."/text"), vmath.vector4(0, 0, 0, 0))
   gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 0, 0, 0))
   
   HUDButtons[id]={id=id,visible=false}
end

--not highlighting cuz it overrides in update each loop

function highlightButton(id)
	
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(0, 1, 0, 1))
	end
end

function dehighlightButton(id)
	if(id~=NO_BUTTON)then
		gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 0, 0, 1))
	end
end

function showButton(id)
	gui.set_color(gui.get_node(id.."/text"), vmath.vector4(1, 1, 1, 1))
    gui.set_color(gui.get_node(id.."/box"), vmath.vector4(1, 0, 0, 1))
    
    HUDButtons[id]={id=id,visible=true}
    
end

function showButtonWithText(id,text)
	showButton(id)
	gui.set_text(gui.get_node(id.."/text"), text)
end



function applyGUILayout(layout)
	if layout then
		if layout.button1 then
			showButtonWithText(BUTTON1,layout.button1.text)
			
		else
			hideButton(BUTTON1)
		end
		
		if layout.button2 then	
			showButtonWithText(BUTTON2,layout.button2.text)
			showButton(BUTTON2)
		else
			hideButton(BUTTON2)
		end
		
		if layout.button3 then
			showButtonWithText(BUTTON3,layout.button3.text)
			showButton(BUTTON3)
		else
			hideButton(BUTTON3)
		end
		
		if layout.button4 then
			showButtonWithText(BUTTON4,layout.button4.text)
			showButton(BUTTON4)
		else
			hideButton(BUTTON4)
		end
		
		if layout.button5 then
			showButtonWithText(BUTTON5,layout.button5.text)
			showButton(BUTTON5)
		else
			hideButton(BUTTON5)
		end
		
		if layout.button6 then
			showButtonWithText(BUTTON6,layout.button6.text)
			showButton(BUTTON6)
		else
			hideButton(BUTTON6)
		end
		
		if layout.button7 then
			showButtonWithText(BUTTON7,layout.button7.text)
			showButton(BUTTON7)
		else
			hideButton(BUTTON7)
		end
		
		if layout.button8 then
			showButtonWithText(BUTTON8,layout.button8.text)
			showButton(BUTTON8)
		else
			hideButton(BUTTON8)
		end
		
		if layout.button9 then
			showButtonWithText(BUTTON9,layout.button9.text)
			showButton(BUTTON9)
		else
			hideButton(BUTTON9)
		end
	end
end