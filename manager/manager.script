
require "modules.data.unitData"
require "modules.data.worker"
require "modules.data.fighters"
require "modules.data.tanks"
require "modules.data.healers"
require "modules.data.extractors"
require "modules.data.buildings"
require "modules.data.language"
require "modules.data.upgrades"


require "modules.dropManager"
require "modules.creations"
require "modules.extractorBase"
require "modules.livingUnit"
require "modules.HUDHelper"
require "modules.resources"
require "modules.productionMethods"
require "modules.workerBase"
require "modules.globals"
require "modules.state"
require "modules.soundHelper"
require "modules.pathfinder"
require "modules.coordinates"
require "modules.unit"
require "modules.movableUnit"
require "modules.pathGenerator"
require "modules.pathFollower"
require "modules.bounds"
require "modules.selectMethods"
require "modules.buildingBase"
require "modules.productionUnit"
require "modules.colors"
require "modules.fogManager"
require "modules.fightingUnit"
require "modules.healingUnit"
require "modules.virus"

require "modules.transactions"

require "modules.storyteller"
require "modules.levelSwitcher"

require "modules.missions.1.subtitlesLevel1"
require "modules.missions.1.section2"
require "modules.missions.1.section1"
require "modules.missions.1.level1"

require "modules.missions.2.subtitlesLevel2"
require "modules.missions.2.section3"
require "modules.missions.2.section2"
require "modules.missions.2.section1"
require "modules.missions.2.level2"

require "modules.missions.3.subtitlesLevel3"
require "modules.missions.3.section2"
require "modules.missions.3.section1"
require "modules.missions.3.level3"

START_POPULATION={}
START_POPULATION[1]=7
START_POPULATION[2]=7
START_POPULATION[3]=15

function init(self)
    
    --give the global tilemap object to this function (globals.lua) and create
    --a table of nodes that will be used for pathfinding
	populateNodeArray(tilemap)
	
	--msg.post("@system:", "toggle_profile")
	
	self.timeSinceLastStorageUpdate=0
	
	TOTAL_POPULATION=START_POPULATION[LEVEL]
	
--[[if IN_GAME then

		local my_table = {}
		my_table.hej=1
		local error=false

		
		local my_file_path = sys.get_save_file("my_game", "my_filee.lua")
		
		msg.post("HUD","displayErrorMessage",{text=my_file_path})
		
		my_table = sys.load(my_file_path)
		if not next(my_table) then
		   --sg.post("HUD","displayErrorMessage",{text="couldnt load"})
		   error=true
		else
			--msg.post("HUD","displayErrorMessage",{text=my_table.hej})
		end
		
		if error then my_table={} my_table.hej=1 end
		
	    my_table.hej=my_table.hej+1
		local my_file_path = sys.get_save_file("my_game", "my_filee.lua")
		if not sys.save(my_file_path, my_table) then
		    
		end
end--]]
end





function update(self, dt)
	updateFoW(dt)
	updateStorage(self,dt)
	
	
	act()
	
	GAME_TIME=GAME_TIME+dt
	--msg.post("HUD","displayErrorMessage",{text=GAME_TIME..", "..dt})
	
	--msg.post("HUD","displayErrorMessage",{text=CAMERA_OFFSETX.." "..CAMERA_OFFSETY})
end


function updateStorage(self,dt)

	if self.timeSinceLastStorageUpdate>= 1.0 and TOTAL_STORAGE<MAX_STORAGE then
	
		if (FAT>400 or PROTEIN>400 or CARBS>400) and LEVEL==2 and 
			not level2State.tutorialSkipped and
			not level2State.section2Done and
			not level2State.replicationStationDone then
			
			msg.post("HUD","displayErrorMessage",{text=LVL2_BUILD_BARACKS_NO_RES})
			
			return
		end
	
		self.timeSinceLastStorageUpdate=0
		
		local proteinIncrease=0
		local carbsIncrease=0
		local fatIncrease=0
		--WORKER_RPM
		
		proteinIncrease=proteinIncrease+(WORKER_RPM/60)*WORKERS_EXTRACTING_PROTEIN
		fatIncrease=fatIncrease+(WORKER_RPM/60)*WORKERS_EXTRACTING_FAT
		carbsIncrease=carbsIncrease+(WORKER_RPM/60)*WORKERS_EXTRACTING_CARB

	
		local newProtein=PROTEIN+proteinIncrease
		local newCarbs=CARBS+carbsIncrease
		local newFat=FAT+fatIncrease
		
		local totalStorage=newProtein+newCarbs+newFat
		
		if totalStorage>MAX_STORAGE then
	
			local diff = totalStorage-MAX_STORAGE
			local totalIncrease=proteinIncrease+carbsIncrease+fatIncrease
			
			newProtein=newProtein-math.ceil(diff*(proteinIncrease/totalStorage))
			newCarbs=newCarbs-math.ceil(diff*(carbsIncrease/totalStorage))
			newFat=newFat-math.ceil(diff*(fatIncrease/totalStorage))
			
			totalStorage=newProtein+newCarbs+newFat
			diff = MAX_STORAGE-totalStorage
			
			if diff>0 then
				if proteinIncrease>0 then
					newProtein=newProtein+diff
				elseif carbsIncrease>0 then
					newCarbs=newCarbs+diff
				elseif fatIncrease>0 then
					newFat=newFat+diff
				end
			end
		end
		
		TOTAL_STORAGE=newProtein+newCarbs+newFat
		
		PROTEIN=newProtein
		CARBS=newCarbs
		FAT=newFat
		
	end
	
	self.timeSinceLastStorageUpdate=self.timeSinceLastStorageUpdate+dt
end


function on_message(self, message_id, message, sender)
    
    --a new unit is single-selected, send message to all units and units that are not the selected one will deselect
	if message_id==hash("unitSelected") then
		for _,unit in  pairs(selectableUnits) do 
		    msg.post(unit,"unitSelected",message)
		end
		
	--send massSelection message to all units, each units will decide if it's in the selection
	elseif message_id==hash("massSelection") then
		for _,unit in  pairs(selectableUnits) do 
			if unit and ALIVE[unit] then
		    	pcall(msg.post,unit,"massSelection",message)
		    end
		end
		
	elseif message_id==hash("massSelectionUrgent")then
		for _,unit in  pairs(selectableUnits) do 
			if unit and ALIVE[unit] then
		    	pcall(msg.post,unit,"massSelectionUrgent",message)
		    end
		end
	
	--double click, select all of a kind on screen	
	elseif message_id==hash("allOnScreenSelectSpecific") then
		
		print("allOnScreenSelectSpecific in manager "..message.name)
	
		for _,unit in  pairs(selectableUnits) do 
			if unit and ALIVE[unit] then
		    	pcall(msg.post,unit,"allOnScreenSelectSpecific",message)
		    end
		end
		
	--send message to all units to deselect all
	elseif message_id==hash("deselectAll")then
		
		for _,unit in  pairs(selectableUnits) do 
			if unit and ALIVE[unit] then
		   		msg.post(unit,"deselect",message)
		   	end
		end
	end
end

function on_input(self, action_id, action)

end

function on_reload(self)
	
	--msg.post("mixer","normalBackground")
end

function secondsToTimeString(seconds)

	local minutes=math.floor(seconds/60)
	local seconds=math.floor(seconds%60)
	
	if seconds<10 then seconds="0"..seconds end
	if minutes<10 then minutes="0"..minutes end
	
	return minutes..":"..seconds

end
